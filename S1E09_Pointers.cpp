// Указатели.

#include <iostream>

using namespace std;

// main
int main_Pointers()
{
	int x = 10;
	cout << "x = " << x << endl;

	// Ссылки.
	// Ссылки используются не только для передачи аргументов в функцию.
	// Их также можно создавать локально.

	// Создание ссылки.
	// int& - ссылка на переменную типа int.
	// Переменная r является по сути синонимом переменной x.
	int& r = x;
	cout << "r = " << r << endl;

	// Изменяя r, мы изменяем x.
	r = 5;
	cout << "r = " << r << endl;
	cout << "x = " << x << endl;
	x = 2;
	cout << "r = " << r << endl;
	cout << "x = " << x << endl;

	// Указатели.

	// Что здесь написано:
	//   int* - тип, обозначающий указатель на int. То есть адрес переменной типа int.
	//   p - имя переменной типа int*.
	//   &x - получение указателя на переменную x.
	int* p = &x;

	// Сейчас переменная p хранит адрес переменной x.
	cout << "p = " << p << endl;

	// Получить содержимое по адресу p можно с помощью разыменования.
	// В данном случае мы получим значение переменной x.
	cout << "*p = " << *p << endl;
	x = 20;
	cout << "*p = " << *p << endl;

	// С помощью разыменования можно не только читать, но писать.
	// В данном случае мы изменим переменную x.
	*p = 30;
	cout << "x = " << x << endl;
	cout << "*p = " << *p << endl;

	// Можно менять не только то, что лижит по адресу p, но и сам адрес. Пример:
	int y = 100;
	p = &y;

	// Теперь указатель p содержит адрес переменной y.
	cout << "p = " << p << endl;

	// И теперь при разыменованиии p мы получим y, а не x.
	*p = 50;
	cout << "x = " << x << endl;
	cout << "y = " << y << endl;

	// Разыменовывая указатель, мы получаем ссылку.
	int& ry = *p;
	cout << "ry = " << ry << endl;
	cout << "y = " << y << endl;
	ry = 70;
	cout << "ry = " << ry << endl;
	cout << "y = " << y << endl;

	cin.ignore();
	return 0;
}
